/****************************************************************************
 * Copyright 2016-2020, Optimizely, Inc. and contributors                   *
 *                                                                          *
 * Licensed under the Apache License, Version 2.0 (the "License");          *
 * you may not use this file except in compliance with the License.         *
 * You may obtain a copy of the License at                                  *
 *                                                                          *
 *    http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                          *
 * Unless required by applicable law or agreed to in writing, software      *
 * distributed under the License is distributed on an "AS IS" BASIS,        *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 * See the License for the specific language governing permissions and      *
 * limitations under the License.                                           *
 ***************************************************************************/

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.4.0'


    ////def version_name = System.getenv('TRAVIS_TAG')
    def version_name = "3.8.0-test-1"




    if (version_name != null) {
        rootProject.ext.version_name = version_name
    } else {
        rootProject.ext.version_name= 'debugVersion'
    }
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        mavenCentral()
        // Uncomment the next line to use maven locally
        //mavenLocal()
    }
}

ext {
    compile_sdk_version = 29
    build_tools_version = "29.0.3"
    min_sdk_version = 14
    target_sdk_version = 29
    java_core_ver = "3.8.0"
    android_logger_ver = "1.3.6"
    jacksonversion= "2.11.2"
    annotations_ver = "1.0.0"
    junit_ver = "4.12"
    mockito_ver = "1.10.19"
    powermock_ver = "1.6.4"
    support_test_runner_ver = "0.5"
    dexmaker_ver = "1.4"
    espresso_ver = "3.1.0"
    gson_ver = "2.8.6"
    group_id = "com.optimizely.ab"
    androidx_test = "1.1.1"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task cleanAllModules () {
    logger.info("Running clean for all modules")
}

cleanAllModules.dependsOn(':android-sdk:clean', ':event-handler:clean',
        ':user-profile:clean', ':shared:clean', ':datafile-handler:clean')

task testAllModules () {
    logger.info("Running android tests for all modules")
}

task testAllModulesTravis () {
    logger.info("Running android tests for Travis")
}

testAllModulesTravis.dependsOn(':android-sdk:connectedAndroidTest', ':android-sdk:test',
        ':event-handler:connectedAndroidTest', ':event-handler:test',
        ':datafile-handler:connectedAndroidTest', ':datafile-handler:test',
        ':user-profile:connectedAndroidTest', ':shared:connectedAndroidTest')

testAllModules.dependsOn('testAllModulesTravis', ':test-app:connectedAndroidTest')

// Publish to MavenCentral

task ship() {
    dependsOn(':android-sdk:uploadArchives', ':shared:uploadArchives',
            'event-handler:uploadArchives', 'user-profile:uploadArchives',
            'datafile-handler:uploadArchives')
}

configure([project(':android-sdk'),
           project(':datafile-handler'),
           project(':event-handler'),
           project(':shared'),
           project(':user-profile')]) {

    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    def artifactName = "android-sdk"
    def docTitle = "Optimizely X Android SDK"
    switch(name){
        case 'android-sdk':
            artifactName = 'android-sdk'
            docTitle = 'Optimizely X Android SDK'
            break
        case 'datafile-handler':
            artifactName = 'android-sdk-datafile-handler'
            docTitle = 'Optimizely X Android Datafile Handler'
            uploadArchives.shouldRunAfter = [':datafile-handler:clean', ':shared:uploadArchives']
            break
        case 'event-handler':
            artifactName = 'android-sdk-event-handler'
            docTitle = 'Optimizely X Android Event Handler'
            break
        case 'shared':
            artifactName = 'android-sdk-shared'
            docTitle = 'Optimizely X Android Shared'
            break
        case 'user-profile':
            artifactName = 'android-sdk-user-profile'
            docTitle = 'Optimizely X Android User Profile'
            break
        default:
            return
    }

    android.libraryVariants.all { variant ->
        task("${variant.name}Javadoc", type: Javadoc, dependsOn: "assemble${variant.name.capitalize()}") {
            source = variant.javaCompile.source

            title = docTitle

            options.links("http://docs.oracle.com/javase/7/docs/api/");
            options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");

            // First add all of your dependencies to the classpath, then add the android jars
            doFirst {
                classpath += files(variant.javaCompileProvider.get().classpath.files)
                classpath += files(android.getBootClasspath())
            }
            // We're excluding these generated files
            exclude '**/BuildConfig.java'
            exclude '**/R.java'

            options.tags = ["hide"]
        }
    }

    android.libraryVariants.all { variant ->
        task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
            classifier = 'javadoc'
            from tasks["${variant.name}Javadoc"].destinationDir
        }

        // Add the Javadoc jar to the project's artifacts. This will allow us to upload it easily later
        project.artifacts.add("archives", tasks["${variant.name}JavadocJar"]);
    }

    android.libraryVariants.all { variant ->
        task("${variant.name}SourcesJar", type: Jar) {
            classifier = 'sources'
            from variant.javaCompile.source
        }
        project.artifacts.add("archives", tasks["${variant.name}SourcesJar"]);
    }

    signing {
        def signingKey = System.getenv('MAVEN_SIGNING_KEY')
        def signingPassword = System.getenv('MAVEN_SIGNING_PASSWORD')
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign configurations.archives
    }

    uploadArchives {
        dependsOn = [project.path + ':releaseJavadocJar', project.path + ':releaseSourcesJar']
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: "file://${buildDir}/repo")
                pom.artifactId = artifactName
            }
        }
    }
}

project(':android-sdk').uploadArchives.shouldRunAfter = [':android-sdk:clean', ':datafile-handler:uploadArchives', ':event-handler:uploadArchives', ':user-profile:uploadArchives']
project(':datafile-handler').uploadArchives.shouldRunAfter = [':datafile-handler:clean', ':shared:uploadArchives']
project(':event-handler').uploadArchives.shouldRunAfter = [':event-handler:clean', ':shared:uploadArchives']
project(':shared').uploadArchives.shouldRunAfter = [':shared:clean']
project(':user-profile').uploadArchives.shouldRunAfter = [':user-profile:clean', ':shared:uploadArchives']

