/*
 * Copyright 2016, Optimizely
 * <p/>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'maven-publish'

version = version_name
group = group_id

android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tools_version

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "CLIENT_VERSION", "\"$version_name\""
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile project(':event-handler')
    compile project(':user-experiment-record')
    provided "com.android.support:support-annotations:$support_annotations_ver"

    testCompile "junit:junit:$junit_ver"
    testCompile "org.mockito:mockito-core:$mockito_ver"
    testCompile "com.noveogroup.android:android-logger:$android_logger_ver"

    androidTestCompile "com.android.support.test:runner:$support_test_runner_ver"
    // Set this dependency to use JUnit 4 rules
    androidTestCompile "com.android.support.test:rules:$support_test_runner_ver"
    // Set this dependency to build and run Espresso tests
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espresso_ver"
    androidTestCompile "org.mockito:mockito-core:$mockito_ver"
    androidTestCompile "com.google.dexmaker:dexmaker:$dexmaker_ver"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:$dexmaker_ver"
    androidTestCompile "com.noveogroup.android:android-logger:$android_logger_ver"
    androidTestCompile "com.google.code.gson:gson:$gson_ver"
}

uploadArchives {
    dependsOn = [':android-sdk:clean', ':android-sdk:releaseJavadocJar']
    shouldRunAfter = [':event-handler:uploadArchives', ':user-experiment-record:uploadArchives']
    repositories {
        mavenDeployer {
            repository(url: "https://api.bintray.com/maven/optimizely/optimizely/optimizely-sdk-android") {
                authentication(userName: bintray_user, password: bintray_api_key)
            }
            pom.artifactId = "android-sdk"
        }
    }
}

android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc, dependsOn: "assemble${variant.name.capitalize()}") {
        source = variant.javaCompile.source

        title = "Optimizely X Android SDK"

        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");

        // First add all of your dependencies to the classpath, then add the android jars
        classpath += files(variant.javaCompile.classpath.files)
        classpath += files(android.getBootClasspath())

        // We're excluding these generated files
        exclude '**/BuildConfig.java'
        exclude '**/R.java'

        options.tags = ["hide"]
    }
}

android.libraryVariants.all { variant ->
    task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
        classifier = 'javadoc'
        from tasks["${variant.name}Javadoc"].destinationDir
    }

    // Add the Javadoc jar to the project's artifacts. This will allow us to upload it easily later
    project.artifacts.add("archives", tasks["${variant.name}JavadocJar"]);
}